# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T01:10:02+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field


class ApprovalConfig(BaseModel):
    approvalRequired: Optional[bool] = Field(
        None,
        description='Whether or not approval is needed. If this is set on a build, it will become pending when created, and will need to be explicitly approved to start.',
    )


class Decision(Enum):
    DECISION_UNSPECIFIED = 'DECISION_UNSPECIFIED'
    APPROVED = 'APPROVED'
    REJECTED = 'REJECTED'


class ApprovalResult(BaseModel):
    approvalTime: Optional[str] = Field(
        None, description='Output only. The time when the approval decision was made.'
    )
    approverAccount: Optional[str] = Field(
        None,
        description='Output only. Email of the user that called the ApproveBuild API to approve or reject a build at the time that the API was called.',
    )
    comment: Optional[str] = Field(
        None,
        description='Optional. An optional comment for this manual approval result.',
    )
    decision: Optional[Decision] = Field(
        None, description='Required. The decision of this manual approval.'
    )
    url: Optional[str] = Field(
        None,
        description='Optional. An optional URL tied to this manual approval result. This field is essentially the same as comment, except that it will be rendered by the UI differently. An example use case is a link to an external job that approved this Build.',
    )


class BatchCreateBitbucketServerConnectedRepositoriesResponseMetadata(BaseModel):
    completeTime: Optional[str] = Field(
        None, description='Time the operation was completed.'
    )
    config: Optional[str] = Field(
        None,
        description='The name of the `BitbucketServerConfig` that added connected repositories. Format: `projects/{project}/locations/{location}/bitbucketServerConfigs/{config}`',
    )
    createTime: Optional[str] = Field(
        None, description='Time the operation was created.'
    )


class BatchCreateGitLabConnectedRepositoriesResponseMetadata(BaseModel):
    completeTime: Optional[str] = Field(
        None, description='Time the operation was completed.'
    )
    config: Optional[str] = Field(
        None,
        description='The name of the `GitLabConfig` that added connected repositories. Format: `projects/{project}/locations/{location}/gitLabConfigs/{config}`',
    )
    createTime: Optional[str] = Field(
        None, description='Time the operation was created.'
    )


class BitbucketServerRepositoryId(BaseModel):
    projectKey: Optional[str] = Field(
        None, description='Required. Identifier for the project storing the repository.'
    )
    repoSlug: Optional[str] = Field(
        None, description='Required. Identifier for the repository.'
    )
    webhookId: Optional[int] = Field(
        None,
        description='Output only. The ID of the webhook that was created for receiving events from this repo. We only create and manage a single webhook for each repo.',
    )


class Status1(Enum):
    STATUS_UNKNOWN = 'STATUS_UNKNOWN'
    PENDING = 'PENDING'
    QUEUED = 'QUEUED'
    WORKING = 'WORKING'
    SUCCESS = 'SUCCESS'
    FAILURE = 'FAILURE'
    INTERNAL_ERROR = 'INTERNAL_ERROR'
    TIMEOUT = 'TIMEOUT'
    CANCELLED = 'CANCELLED'
    EXPIRED = 'EXPIRED'


class State(Enum):
    STATE_UNSPECIFIED = 'STATE_UNSPECIFIED'
    PENDING = 'PENDING'
    APPROVED = 'APPROVED'
    REJECTED = 'REJECTED'
    CANCELLED = 'CANCELLED'


class BuildApproval(BaseModel):
    config: Optional[ApprovalConfig] = Field(
        None,
        description='Output only. Configuration for manual approval of this build.',
    )
    result: Optional[ApprovalResult] = Field(
        None, description='Output only. Result of manual approval for this Build.'
    )
    state: Optional[State] = Field(
        None, description="Output only. The state of this build's approval."
    )


class LogStreamingOption(Enum):
    STREAM_DEFAULT = 'STREAM_DEFAULT'
    STREAM_ON = 'STREAM_ON'
    STREAM_OFF = 'STREAM_OFF'


class Logging(Enum):
    LOGGING_UNSPECIFIED = 'LOGGING_UNSPECIFIED'
    LEGACY = 'LEGACY'
    GCS_ONLY = 'GCS_ONLY'
    STACKDRIVER_ONLY = 'STACKDRIVER_ONLY'
    CLOUD_LOGGING_ONLY = 'CLOUD_LOGGING_ONLY'
    NONE = 'NONE'


class MachineType(Enum):
    UNSPECIFIED = 'UNSPECIFIED'
    N1_HIGHCPU_8 = 'N1_HIGHCPU_8'
    N1_HIGHCPU_32 = 'N1_HIGHCPU_32'
    E2_HIGHCPU_8 = 'E2_HIGHCPU_8'
    E2_HIGHCPU_32 = 'E2_HIGHCPU_32'


class RequestedVerifyOption(Enum):
    NOT_VERIFIED = 'NOT_VERIFIED'
    VERIFIED = 'VERIFIED'


class SourceProvenanceHashEnum(Enum):
    NONE = 'NONE'
    SHA256 = 'SHA256'
    MD5 = 'MD5'


class SubstitutionOption(Enum):
    MUST_MATCH = 'MUST_MATCH'
    ALLOW_LOOSE = 'ALLOW_LOOSE'


class CancelOperationRequest(BaseModel):
    pass


class CreateBitbucketServerConfigOperationMetadata(BaseModel):
    bitbucketServerConfig: Optional[str] = Field(
        None,
        description='The resource name of the BitbucketServerConfig to be created. Format: `projects/{project}/locations/{location}/bitbucketServerConfigs/{id}`.',
    )
    completeTime: Optional[str] = Field(
        None, description='Time the operation was completed.'
    )
    createTime: Optional[str] = Field(
        None, description='Time the operation was created.'
    )


class CreateGitHubEnterpriseConfigOperationMetadata(BaseModel):
    completeTime: Optional[str] = Field(
        None, description='Time the operation was completed.'
    )
    createTime: Optional[str] = Field(
        None, description='Time the operation was created.'
    )
    githubEnterpriseConfig: Optional[str] = Field(
        None,
        description='The resource name of the GitHubEnterprise to be created. Format: `projects/{project}/locations/{location}/githubEnterpriseConfigs/{id}`.',
    )


class CreateGitLabConfigOperationMetadata(BaseModel):
    completeTime: Optional[str] = Field(
        None, description='Time the operation was completed.'
    )
    createTime: Optional[str] = Field(
        None, description='Time the operation was created.'
    )
    gitlabConfig: Optional[str] = Field(
        None,
        description='The resource name of the GitLabConfig to be created. Format: `projects/{project}/locations/{location}/gitlabConfigs/{id}`.',
    )


class CreateWorkerPoolOperationMetadata(BaseModel):
    completeTime: Optional[str] = Field(
        None, description='Time the operation was completed.'
    )
    createTime: Optional[str] = Field(
        None, description='Time the operation was created.'
    )
    workerPool: Optional[str] = Field(
        None,
        description='The resource name of the `WorkerPool` to create. Format: `projects/{project}/locations/{location}/workerPools/{worker_pool}`.',
    )


class DeleteBitbucketServerConfigOperationMetadata(BaseModel):
    bitbucketServerConfig: Optional[str] = Field(
        None,
        description='The resource name of the BitbucketServerConfig to be deleted. Format: `projects/{project}/locations/{location}/bitbucketServerConfigs/{id}`.',
    )
    completeTime: Optional[str] = Field(
        None, description='Time the operation was completed.'
    )
    createTime: Optional[str] = Field(
        None, description='Time the operation was created.'
    )


class DeleteGitHubEnterpriseConfigOperationMetadata(BaseModel):
    completeTime: Optional[str] = Field(
        None, description='Time the operation was completed.'
    )
    createTime: Optional[str] = Field(
        None, description='Time the operation was created.'
    )
    githubEnterpriseConfig: Optional[str] = Field(
        None,
        description='The resource name of the GitHubEnterprise to be deleted. Format: `projects/{project}/locations/{location}/githubEnterpriseConfigs/{id}`.',
    )


class DeleteGitLabConfigOperationMetadata(BaseModel):
    completeTime: Optional[str] = Field(
        None, description='Time the operation was completed.'
    )
    createTime: Optional[str] = Field(
        None, description='Time the operation was created.'
    )
    gitlabConfig: Optional[str] = Field(
        None,
        description='The resource name of the GitLabConfig to be created. Format: `projects/{project}/locations/{location}/gitlabConfigs/{id}`.',
    )


class DeleteWorkerPoolOperationMetadata(BaseModel):
    completeTime: Optional[str] = Field(
        None, description='Time the operation was completed.'
    )
    createTime: Optional[str] = Field(
        None, description='Time the operation was created.'
    )
    workerPool: Optional[str] = Field(
        None,
        description='The resource name of the `WorkerPool` being deleted. Format: `projects/{project}/locations/{location}/workerPools/{worker_pool}`.',
    )


class Empty(BaseModel):
    pass


class Type(Enum):
    FAILURE_TYPE_UNSPECIFIED = 'FAILURE_TYPE_UNSPECIFIED'
    PUSH_FAILED = 'PUSH_FAILED'
    PUSH_IMAGE_NOT_FOUND = 'PUSH_IMAGE_NOT_FOUND'
    PUSH_NOT_AUTHORIZED = 'PUSH_NOT_AUTHORIZED'
    LOGGING_FAILURE = 'LOGGING_FAILURE'
    USER_BUILD_STEP = 'USER_BUILD_STEP'
    FETCH_SOURCE_FAILED = 'FETCH_SOURCE_FAILED'


class FailureInfo(BaseModel):
    detail: Optional[str] = Field(
        None,
        description='Explains the failure issue in more detail using hard-coded text.',
    )
    type: Optional[Type] = Field(None, description='The name of the failure.')


class GitLabRepositoryId(BaseModel):
    id: Optional[str] = Field(
        None,
        description='Required. Identifier for the repository. example: "namespace/project-slug", namespace is usually the username or group ID',
    )
    webhookId: Optional[int] = Field(
        None,
        description='Output only. The ID of the webhook that was created for receiving events from this repo. We only create and manage a single webhook for each repo.',
    )


class GoogleDevtoolsCloudbuildV2OperationMetadata(BaseModel):
    apiVersion: Optional[str] = Field(
        None, description='Output only. API version used to start the operation.'
    )
    createTime: Optional[str] = Field(
        None, description='Output only. The time the operation was created.'
    )
    endTime: Optional[str] = Field(
        None, description='Output only. The time the operation finished running.'
    )
    requestedCancellation: Optional[bool] = Field(
        None,
        description='Output only. Identifies whether the user has requested cancellation of the operation. Operations that have successfully been cancelled have Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.',
    )
    statusMessage: Optional[str] = Field(
        None, description='Output only. Human-readable status of the operation, if any.'
    )
    target: Optional[str] = Field(
        None,
        description='Output only. Server-defined resource path for the target of the operation.',
    )
    verb: Optional[str] = Field(
        None, description='Output only. Name of the verb executed by the operation.'
    )


class HTTPDelivery(BaseModel):
    uri: Optional[str] = Field(
        None,
        description='The URI to which JSON-containing HTTP POST requests should be sent.',
    )


class Type1(Enum):
    NONE = 'NONE'
    SHA256 = 'SHA256'
    MD5 = 'MD5'


class Hash(BaseModel):
    type: Optional[Type1] = Field(
        None, description='The type of hash that was performed.'
    )
    value: Optional[str] = Field(None, description='The hash value.')


class InlineSecret(BaseModel):
    envMap: Optional[Dict[str, str]] = Field(
        None,
        description="Map of environment variable name to its encrypted value. Secret environment variables must be unique across all of a build's secrets, and must be used by at least one build step. Values can be at most 64 KB in size. There can be at most 100 secret values across all of a build's secrets.",
    )
    kmsKeyName: Optional[str] = Field(
        None,
        description='Resource name of Cloud KMS crypto key to decrypt the encrypted value. In format: projects/*/locations/*/keyRings/*/cryptoKeys/*',
    )


class MavenArtifact(BaseModel):
    artifactId: Optional[str] = Field(
        None,
        description='Maven `artifactId` value used when uploading the artifact to Artifact Registry.',
    )
    groupId: Optional[str] = Field(
        None,
        description='Maven `groupId` value used when uploading the artifact to Artifact Registry.',
    )
    path: Optional[str] = Field(
        None,
        description="Path to an artifact in the build's workspace to be uploaded to Artifact Registry. This can be either an absolute path, e.g. /workspace/my-app/target/my-app-1.0.SNAPSHOT.jar or a relative path from /workspace, e.g. my-app/target/my-app-1.0.SNAPSHOT.jar.",
    )
    repository: Optional[str] = Field(
        None,
        description='Artifact Registry repository, in the form "https://$REGION-maven.pkg.dev/$PROJECT/$REPOSITORY" Artifact in the workspace specified by path will be uploaded to Artifact Registry with this location as a prefix.',
    )
    version: Optional[str] = Field(
        None,
        description='Maven `version` value used when uploading the artifact to Artifact Registry.',
    )


class NetworkConfig(BaseModel):
    peeredNetwork: Optional[str] = Field(
        None,
        description='Required. Immutable. The network definition that the workers are peered to. If this section is left empty, the workers will be peered to WorkerPool.project_id on the default network. Must be in the format `projects/{project}/global/networks/{network}`, where {project} is a project number, such as `12345`, and {network} is the name of a VPC network in the project.',
    )


class NotifierMetadata(BaseModel):
    name: Optional[str] = Field(
        None,
        description='The human-readable and user-given name for the notifier. For example: "repo-merge-email-notifier".',
    )
    notifier: Optional[str] = Field(
        None,
        description='The string representing the name and version of notifier to deploy. Expected to be of the form of "/:". For example: "gcr.io/my-project/notifiers/smtp:1.2.34".',
    )


class NotifierSecret(BaseModel):
    name: Optional[str] = Field(
        None,
        description='Name is the local name of the secret, such as the verbatim string "my-smtp-password".',
    )
    value: Optional[str] = Field(
        None,
        description='Value is interpreted to be a resource path for fetching the actual (versioned) secret data for this secret. For example, this would be a Google Cloud Secret Manager secret version resource path like: "projects/my-project/secrets/my-secret/versions/latest".',
    )


class NotifierSecretRef(BaseModel):
    secretRef: Optional[str] = Field(
        None,
        description='The value of `secret_ref` should be a `name` that is registered in a `Secret` in the `secrets` list of the `Spec`.',
    )


class OperationMetadata(BaseModel):
    apiVersion: Optional[str] = Field(
        None, description='Output only. API version used to start the operation.'
    )
    cancelRequested: Optional[bool] = Field(
        None,
        description='Output only. Identifies whether the user has requested cancellation of the operation. Operations that have been cancelled successfully have Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.',
    )
    createTime: Optional[str] = Field(
        None, description='Output only. The time the operation was created.'
    )
    endTime: Optional[str] = Field(
        None, description='Output only. The time the operation finished running.'
    )
    statusDetail: Optional[str] = Field(
        None, description='Output only. Human-readable status of the operation, if any.'
    )
    target: Optional[str] = Field(
        None,
        description='Output only. Server-defined resource path for the target of the operation.',
    )
    verb: Optional[str] = Field(
        None, description='Output only. Name of the verb executed by the operation.'
    )


class PoolOption(BaseModel):
    name: Optional[str] = Field(
        None,
        description='The `WorkerPool` resource to execute the build on. You must have `cloudbuild.workerpools.use` on the project hosting the WorkerPool. Format projects/{project}/locations/{location}/workerPools/{workerPoolId}',
    )


class ProcessAppManifestCallbackOperationMetadata(BaseModel):
    completeTime: Optional[str] = Field(
        None, description='Time the operation was completed.'
    )
    createTime: Optional[str] = Field(
        None, description='Time the operation was created.'
    )
    githubEnterpriseConfig: Optional[str] = Field(
        None,
        description='The resource name of the GitHubEnterprise to be created. Format: `projects/{project}/locations/{location}/githubEnterpriseConfigs/{id}`.',
    )


class PythonPackage(BaseModel):
    paths: Optional[List[str]] = Field(
        None,
        description="Path globs used to match files in the build's workspace. For Python/ Twine, this is usually `dist/*`, and sometimes additionally an `.asc` file.",
    )
    repository: Optional[str] = Field(
        None,
        description='Artifact Registry repository, in the form "https://$REGION-python.pkg.dev/$PROJECT/$REPOSITORY" Files in the workspace matching any path pattern will be uploaded to Artifact Registry with this location as a prefix.',
    )


class RepoSource(BaseModel):
    branchName: Optional[str] = Field(
        None,
        description='Regex matching branches to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax',
    )
    commitSha: Optional[str] = Field(None, description='Explicit commit SHA to build.')
    dir: Optional[str] = Field(
        None,
        description="Directory, relative to the source root, in which to run the build. This must be a relative path. If a step's `dir` is specified and is an absolute path, this value is ignored for that step's execution.",
    )
    invertRegex: Optional[bool] = Field(
        None,
        description='Only trigger a build if the revision regex does NOT match the revision regex.',
    )
    projectId: Optional[str] = Field(
        None,
        description='ID of the project that owns the Cloud Source Repository. If omitted, the project ID requesting the build is assumed.',
    )
    repoName: Optional[str] = Field(
        None, description='Name of the Cloud Source Repository.'
    )
    substitutions: Optional[Dict[str, str]] = Field(
        None,
        description='Substitutions to use in a triggered build. Should only be used with RunBuildTrigger',
    )
    tagName: Optional[str] = Field(
        None,
        description='Regex matching tags to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax',
    )


class Repository(BaseModel):
    annotations: Optional[Dict[str, str]] = Field(
        None, description='Allows clients to store small amounts of arbitrary data.'
    )
    createTime: Optional[str] = Field(
        None,
        description='Output only. Server assigned timestamp for when the connection was created.',
    )
    etag: Optional[str] = Field(
        None,
        description='This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.',
    )
    name: Optional[str] = Field(
        None,
        description='Immutable. Resource name of the repository, in the format `projects/*/locations/*/connections/*/repositories/*`.',
    )
    remoteUri: Optional[str] = Field(None, description='Required. Git Clone HTTPS URI.')
    updateTime: Optional[str] = Field(
        None,
        description='Output only. Server assigned timestamp for when the connection was updated.',
    )


class RunWorkflowCustomOperationMetadata(BaseModel):
    apiVersion: Optional[str] = Field(
        None, description='Output only. API version used to start the operation.'
    )
    createTime: Optional[str] = Field(
        None, description='Output only. The time the operation was created.'
    )
    endTime: Optional[str] = Field(
        None, description='Output only. The time the operation finished running.'
    )
    pipelineRunId: Optional[str] = Field(
        None, description='Output only. ID of the pipeline run created by RunWorkflow.'
    )
    requestedCancellation: Optional[bool] = Field(
        None,
        description='Output only. Identifies whether the user has requested cancellation of the operation. Operations that have successfully been cancelled have Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.',
    )
    target: Optional[str] = Field(
        None,
        description='Output only. Server-defined resource path for the target of the operation.',
    )
    verb: Optional[str] = Field(
        None, description='Output only. Name of the verb executed by the operation.'
    )


class SMTPDelivery(BaseModel):
    fromAddress: Optional[str] = Field(
        None,
        description='This is the SMTP account/email that appears in the `From:` of the email. If empty, it is assumed to be sender.',
    )
    password: Optional[NotifierSecretRef] = Field(
        None, description="The SMTP sender's password."
    )
    port: Optional[str] = Field(None, description='The SMTP port of the server.')
    recipientAddresses: Optional[List[str]] = Field(
        None,
        description='This is the list of addresses to which we send the email (i.e. in the `To:` of the email).',
    )
    senderAddress: Optional[str] = Field(
        None,
        description='This is the SMTP account/email that is used to send the message.',
    )
    server: Optional[str] = Field(None, description='The address of the SMTP server.')


class Secret(BaseModel):
    kmsKeyName: Optional[str] = Field(
        None, description='Cloud KMS key name to use to decrypt these envs.'
    )
    secretEnv: Optional[Dict[str, str]] = Field(
        None,
        description="Map of environment variable name to its encrypted value. Secret environment variables must be unique across all of a build's secrets, and must be used by at least one build step. Values can be at most 64 KB in size. There can be at most 100 secret values across all of a build's secrets.",
    )


class SecretManagerSecret(BaseModel):
    env: Optional[str] = Field(
        None,
        description="Environment variable name to associate with the secret. Secret environment variables must be unique across all of a build's secrets, and must be used by at least one build step.",
    )
    versionName: Optional[str] = Field(
        None,
        description='Resource name of the SecretVersion. In format: projects/*/secrets/*/versions/*',
    )


class Secrets(BaseModel):
    inline: Optional[List[InlineSecret]] = Field(
        None,
        description='Secrets encrypted with KMS key and the associated secret environment variable.',
    )
    secretManager: Optional[List[SecretManagerSecret]] = Field(
        None,
        description='Secrets in Secret Manager and associated secret environment variable.',
    )


class SlackDelivery(BaseModel):
    webhookUri: Optional[NotifierSecretRef] = Field(
        None,
        description='The secret reference for the Slack webhook URI for sending messages to a channel.',
    )


class Status(BaseModel):
    code: Optional[int] = Field(
        None,
        description='The status code, which should be an enum value of google.rpc.Code.',
    )
    details: Optional[List[Dict[str, Any]]] = Field(
        None,
        description='A list of messages that carry the error details. There is a common set of message types for APIs to use.',
    )
    message: Optional[str] = Field(
        None,
        description='A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.',
    )


class StorageSource(BaseModel):
    bucket: Optional[str] = Field(
        None,
        description='Google Cloud Storage bucket containing the source (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)).',
    )
    generation: Optional[str] = Field(
        None,
        description='Google Cloud Storage generation for the object. If the generation is omitted, the latest generation will be used.',
    )
    object: Optional[str] = Field(
        None,
        description='Google Cloud Storage object containing the source. This object must be a zipped (`.zip`) or gzipped archive file (`.tar.gz`) containing source to build.',
    )


class StorageSourceManifest(BaseModel):
    bucket: Optional[str] = Field(
        None,
        description='Google Cloud Storage bucket containing the source manifest (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)).',
    )
    generation: Optional[str] = Field(
        None,
        description='Google Cloud Storage generation for the object. If the generation is omitted, the latest generation will be used.',
    )
    object: Optional[str] = Field(
        None,
        description='Google Cloud Storage object containing the source manifest. This object must be a JSON file.',
    )


class TimeSpan(BaseModel):
    endTime: Optional[str] = Field(None, description='End of time span.')
    startTime: Optional[str] = Field(None, description='Start of time span.')


class UpdateBitbucketServerConfigOperationMetadata(BaseModel):
    bitbucketServerConfig: Optional[str] = Field(
        None,
        description='The resource name of the BitbucketServerConfig to be updated. Format: `projects/{project}/locations/{location}/bitbucketServerConfigs/{id}`.',
    )
    completeTime: Optional[str] = Field(
        None, description='Time the operation was completed.'
    )
    createTime: Optional[str] = Field(
        None, description='Time the operation was created.'
    )


class UpdateGitHubEnterpriseConfigOperationMetadata(BaseModel):
    completeTime: Optional[str] = Field(
        None, description='Time the operation was completed.'
    )
    createTime: Optional[str] = Field(
        None, description='Time the operation was created.'
    )
    githubEnterpriseConfig: Optional[str] = Field(
        None,
        description='The resource name of the GitHubEnterprise to be updated. Format: `projects/{project}/locations/{location}/githubEnterpriseConfigs/{id}`.',
    )


class UpdateGitLabConfigOperationMetadata(BaseModel):
    completeTime: Optional[str] = Field(
        None, description='Time the operation was completed.'
    )
    createTime: Optional[str] = Field(
        None, description='Time the operation was created.'
    )
    gitlabConfig: Optional[str] = Field(
        None,
        description='The resource name of the GitLabConfig to be created. Format: `projects/{project}/locations/{location}/gitlabConfigs/{id}`.',
    )


class UpdateWorkerPoolOperationMetadata(BaseModel):
    completeTime: Optional[str] = Field(
        None, description='Time the operation was completed.'
    )
    createTime: Optional[str] = Field(
        None, description='Time the operation was created.'
    )
    workerPool: Optional[str] = Field(
        None,
        description='The resource name of the `WorkerPool` being updated. Format: `projects/{project}/locations/{location}/workerPools/{worker_pool}`.',
    )


class Volume(BaseModel):
    name: Optional[str] = Field(
        None,
        description='Name of the volume to mount. Volume names must be unique per build step and must be valid names for Docker volumes. Each named volume must be used by at least two build steps.',
    )
    path: Optional[str] = Field(
        None,
        description='Path at which to mount the volume. Paths must be absolute and cannot conflict with other volume paths on the same build step or with certain reserved volume paths.',
    )


class Priority(Enum):
    PRIORITY_UNSPECIFIED = 'PRIORITY_UNSPECIFIED'
    INFO = 'INFO'
    WARNING = 'WARNING'
    ALERT = 'ALERT'


class Warning(BaseModel):
    priority: Optional[Priority] = Field(
        None, description='The priority for this warning.'
    )
    text: Optional[str] = Field(
        None, description='Explanation of the warning generated.'
    )


class WorkerConfig(BaseModel):
    diskSizeGb: Optional[str] = Field(
        None,
        description='Size of the disk attached to the worker, in GB. See https://cloud.google.com/compute/docs/disks/ If `0` is specified, Cloud Build will use a standard disk size.',
    )
    machineType: Optional[str] = Field(
        None,
        description='Machine Type of the worker, such as n1-standard-1. See https://cloud.google.com/compute/docs/machine-types. If left blank, Cloud Build will use a standard unspecified machine to create the worker pool.',
    )


class State1(Enum):
    STATE_UNSPECIFIED = 'STATE_UNSPECIFIED'
    CREATING = 'CREATING'
    RUNNING = 'RUNNING'
    DELETING = 'DELETING'
    DELETED = 'DELETED'


class WorkerPool(BaseModel):
    createTime: Optional[str] = Field(
        None,
        description='Output only. Time at which the request to create the `WorkerPool` was received.',
    )
    deleteTime: Optional[str] = Field(
        None,
        description='Output only. Time at which the request to delete the `WorkerPool` was received.',
    )
    name: Optional[str] = Field(
        None,
        description='Output only. The resource name of the `WorkerPool`. Format of the name is `projects/{project_id}/workerPools/{worker_pool_id}`, where the value of {worker_pool_id} is provided in the CreateWorkerPool request.',
    )
    networkConfig: Optional[NetworkConfig] = Field(
        None, description='Network configuration for the `WorkerPool`.'
    )
    region: Optional[str] = Field(
        None,
        description='Required. Immutable. The region where the `WorkerPool` runs. Only "us-central1" is currently supported. Note that `region` cannot be changed once the `WorkerPool` is created.',
    )
    state: Optional[State1] = Field(None, description='Output only. WorkerPool state.')
    updateTime: Optional[str] = Field(
        None,
        description='Output only. Time at which the request to update the `WorkerPool` was received.',
    )
    workerConfig: Optional[WorkerConfig] = Field(
        None, description='Worker configuration for the `WorkerPool`.'
    )


class FieldXgafv(Enum):
    field_1 = '1'
    field_2 = '2'


class Alt(Enum):
    json = 'json'
    media = 'media'
    proto = 'proto'


class ArtifactObjects(BaseModel):
    location: Optional[str] = Field(
        None,
        description='Cloud Storage bucket and optional object path, in the form "gs://bucket/path/to/somewhere/". (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)). Files in the workspace matching any path pattern will be uploaded to Cloud Storage with this location as a prefix.',
    )
    paths: Optional[List[str]] = Field(
        None, description="Path globs used to match files in the build's workspace."
    )
    timing: Optional[TimeSpan] = Field(
        None,
        description='Output only. Stores timing information for pushing all artifact objects.',
    )


class Artifacts(BaseModel):
    images: Optional[List[str]] = Field(
        None,
        description="A list of images to be pushed upon the successful completion of all build steps. The images will be pushed using the builder service account's credentials. The digests of the pushed images will be stored in the Build resource's results field. If any of the images fail to be pushed, the build is marked FAILURE.",
    )
    mavenArtifacts: Optional[List[MavenArtifact]] = Field(
        None,
        description="A list of Maven artifacts to be uploaded to Artifact Registry upon successful completion of all build steps. Artifacts in the workspace matching specified paths globs will be uploaded to the specified Artifact Registry repository using the builder service account's credentials. If any artifacts fail to be pushed, the build is marked FAILURE.",
    )
    objects: Optional[ArtifactObjects] = Field(
        None,
        description="A list of objects to be uploaded to Cloud Storage upon successful completion of all build steps. Files in the workspace matching specified paths globs will be uploaded to the specified Cloud Storage location using the builder service account's credentials. The location and generation of the uploaded objects will be stored in the Build resource's results field. If any objects fail to be pushed, the build is marked FAILURE.",
    )
    pythonPackages: Optional[List[PythonPackage]] = Field(
        None,
        description='A list of Python packages to be uploaded to Artifact Registry upon successful completion of all build steps. The build service account credentials will be used to perform the upload. If any objects fail to be pushed, the build is marked FAILURE.',
    )


class BatchCreateRepositoriesResponse(BaseModel):
    repositories: Optional[List[Repository]] = Field(
        None, description='Repository resources created.'
    )


class BitbucketServerConnectedRepository(BaseModel):
    parent: Optional[str] = Field(
        None,
        description='The name of the `BitbucketServerConfig` that added connected repository. Format: `projects/{project}/locations/{location}/bitbucketServerConfigs/{config}`',
    )
    repo: Optional[BitbucketServerRepositoryId] = Field(
        None, description='The Bitbucket Server repositories to connect.'
    )
    status: Optional[Status] = Field(
        None, description='Output only. The status of the repo connection request.'
    )


class BuildOptions(BaseModel):
    diskSizeGb: Optional[str] = Field(
        None,
        description='Requested disk size for the VM that runs the build. Note that this is *NOT* "disk free"; some of the space will be used by the operating system and build utilities. Also note that this is the minimum disk size that will be allocated for the build -- the build may run with a larger disk than requested. At present, the maximum disk size is 2000GB; builds that request more than the maximum are rejected with an error.',
    )
    dynamicSubstitutions: Optional[bool] = Field(
        None,
        description='Option to specify whether or not to apply bash style string operations to the substitutions. NOTE: this is always enabled for triggered builds and cannot be overridden in the build configuration file.',
    )
    env: Optional[List[str]] = Field(
        None,
        description='A list of global environment variable definitions that will exist for all build steps in this build. If a variable is defined in both globally and in a build step, the variable will use the build step value. The elements are of the form "KEY=VALUE" for the environment variable "KEY" being given the value "VALUE".',
    )
    logStreamingOption: Optional[LogStreamingOption] = Field(
        None,
        description='Option to define build log streaming behavior to Google Cloud Storage.',
    )
    logging: Optional[Logging] = Field(
        None,
        description='Option to specify the logging mode, which determines if and where build logs are stored.',
    )
    machineType: Optional[MachineType] = Field(
        None, description='Compute Engine machine type on which to run the build.'
    )
    pool: Optional[PoolOption] = Field(
        None,
        description='Optional. Specification for execution on a `WorkerPool`. See [running builds in a private pool](https://cloud.google.com/build/docs/private-pools/run-builds-in-private-pool) for more information.',
    )
    requestedVerifyOption: Optional[RequestedVerifyOption] = Field(
        None, description='Requested verifiability options.'
    )
    secretEnv: Optional[List[str]] = Field(
        None,
        description="A list of global environment variables, which are encrypted using a Cloud Key Management Service crypto key. These values must be specified in the build's `Secret`. These variables will be available to all build steps in this build.",
    )
    sourceProvenanceHash: Optional[List[SourceProvenanceHashEnum]] = Field(
        None, description='Requested hash for SourceProvenance.'
    )
    substitutionOption: Optional[SubstitutionOption] = Field(
        None,
        description='Option to specify behavior when there is an error in the substitution checks. NOTE: this is always set to ALLOW_LOOSE for triggered builds and cannot be overridden in the build configuration file.',
    )
    volumes: Optional[List[Volume]] = Field(
        None,
        description='Global list of volumes to mount for ALL build steps Each volume is created as an empty volume prior to starting the build process. Upon completion of the build, volumes and their contents are discarded. Global volume names and paths cannot conflict with the volumes defined a build step. Using a global volume in a build with only one step is not valid as it is indicative of a build request with an incorrect configuration.',
    )
    workerPool: Optional[str] = Field(
        None, description='This field deprecated; please use `pool.name` instead.'
    )


class BuildStep(BaseModel):
    allowExitCodes: Optional[List[int]] = Field(
        None,
        description='Allow this build step to fail without failing the entire build if and only if the exit code is one of the specified codes. If allow_failure is also specified, this field will take precedence.',
    )
    allowFailure: Optional[bool] = Field(
        None,
        description='Allow this build step to fail without failing the entire build. If false, the entire build will fail if this step fails. Otherwise, the build will succeed, but this step will still have a failure status. Error information will be reported in the failure_detail field.',
    )
    args: Optional[List[str]] = Field(
        None,
        description="A list of arguments that will be presented to the step when it is started. If the image used to run the step's container has an entrypoint, the `args` are used as arguments to that entrypoint. If the image does not define an entrypoint, the first element in args is used as the entrypoint, and the remainder will be used as arguments.",
    )
    dir: Optional[str] = Field(
        None,
        description="Working directory to use when running this step's container. If this value is a relative path, it is relative to the build's working directory. If this value is absolute, it may be outside the build's working directory, in which case the contents of the path may not be persisted across build step executions, unless a `volume` for that path is specified. If the build specifies a `RepoSource` with `dir` and a step with a `dir`, which specifies an absolute path, the `RepoSource` `dir` is ignored for the step's execution.",
    )
    entrypoint: Optional[str] = Field(
        None,
        description="Entrypoint to be used instead of the build step image's default entrypoint. If unset, the image's default entrypoint is used.",
    )
    env: Optional[List[str]] = Field(
        None,
        description='A list of environment variable definitions to be used when running a step. The elements are of the form "KEY=VALUE" for the environment variable "KEY" being given the value "VALUE".',
    )
    exitCode: Optional[int] = Field(
        None, description='Output only. Return code from running the step.'
    )
    id: Optional[str] = Field(
        None,
        description='Unique identifier for this build step, used in `wait_for` to reference this build step as a dependency.',
    )
    name: Optional[str] = Field(
        None,
        description='Required. The name of the container image that will run this particular build step. If the image is available in the host\'s Docker daemon\'s cache, it will be run directly. If not, the host will attempt to pull the image first, using the builder service account\'s credentials if necessary. The Docker daemon\'s cache will already have the latest versions of all of the officially supported build steps ([https://github.com/GoogleCloudPlatform/cloud-builders](https://github.com/GoogleCloudPlatform/cloud-builders)). The Docker daemon will also have cached many of the layers for some popular images, like "ubuntu", "debian", but they will be refreshed at the time you attempt to use them. If you built an image in a previous build step, it will be stored in the host\'s Docker daemon\'s cache and is available to use as the name for a later build step.',
    )
    pullTiming: Optional[TimeSpan] = Field(
        None,
        description="Output only. Stores timing information for pulling this build step's builder image only.",
    )
    script: Optional[str] = Field(
        None,
        description='A shell script to be executed in the step. When script is provided, the user cannot specify the entrypoint or args.',
    )
    secretEnv: Optional[List[str]] = Field(
        None,
        description="A list of environment variables which are encrypted using a Cloud Key Management Service crypto key. These values must be specified in the build's `Secret`.",
    )
    status: Optional[Status1] = Field(
        None,
        description='Output only. Status of the build step. At this time, build step status is only updated on build completion; step status is not updated in real-time as the build progresses.',
    )
    timeout: Optional[str] = Field(
        None,
        description='Time limit for executing this build step. If not defined, the step has no time limit and will be allowed to continue to run until either it completes or the build itself times out.',
    )
    timing: Optional[TimeSpan] = Field(
        None,
        description='Output only. Stores timing information for executing this build step.',
    )
    volumes: Optional[List[Volume]] = Field(
        None,
        description='List of volumes to mount into the build step. Each volume is created as an empty volume prior to execution of the build step. Upon completion of the build, volumes and their contents are discarded. Using a named volume in only one step is not valid as it is indicative of a build request with an incorrect configuration.',
    )
    waitFor: Optional[List[str]] = Field(
        None,
        description='The ID(s) of the step(s) that this build step depends on. This build step will not start until all the build steps in `wait_for` have completed successfully. If `wait_for` is empty, this build step will start when all previous build steps in the `Build.Steps` list have completed successfully.',
    )


class BuiltImage(BaseModel):
    digest: Optional[str] = Field(None, description='Docker Registry 2.0 digest.')
    name: Optional[str] = Field(
        None,
        description='Name used to push the container image to Google Container Registry, as presented to `docker push`.',
    )
    pushTiming: Optional[TimeSpan] = Field(
        None,
        description='Output only. Stores timing information for pushing the specified image.',
    )


class FileHashes(BaseModel):
    fileHash: Optional[List[Hash]] = Field(
        None, description='Collection of file hashes.'
    )


class GitLabConnectedRepository(BaseModel):
    parent: Optional[str] = Field(
        None,
        description='The name of the `GitLabConfig` that added connected repository. Format: `projects/{project}/locations/{location}/gitLabConfigs/{config}`',
    )
    repo: Optional[GitLabRepositoryId] = Field(
        None, description='The GitLab repositories to connect.'
    )
    status: Optional[Status] = Field(
        None, description='Output only. The status of the repo connection request.'
    )


class ListWorkerPoolsResponse(BaseModel):
    workerPools: Optional[List[WorkerPool]] = Field(
        None, description='`WorkerPools` for the specified project.'
    )


class Notification(BaseModel):
    filter: Optional[str] = Field(
        None,
        description='The filter string to use for notification filtering. Currently, this is assumed to be a CEL program. See https://opensource.google/projects/cel for more.',
    )
    httpDelivery: Optional[HTTPDelivery] = Field(
        None, description='Configuration for HTTP delivery.'
    )
    slackDelivery: Optional[SlackDelivery] = Field(
        None, description='Configuration for Slack delivery.'
    )
    smtpDelivery: Optional[SMTPDelivery] = Field(
        None, description='Configuration for SMTP (email) delivery.'
    )
    structDelivery: Optional[Dict[str, Any]] = Field(
        None, description='Escape hatch for users to supply custom delivery configs.'
    )


class NotifierSpec(BaseModel):
    notification: Optional[Notification] = Field(
        None, description='The configuration of this particular notifier.'
    )
    secrets: Optional[List[NotifierSecret]] = Field(
        None,
        description='Configurations for secret resources used by this particular notifier.',
    )


class Operation(BaseModel):
    done: Optional[bool] = Field(
        None,
        description='If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.',
    )
    error: Optional[Status] = Field(
        None,
        description='The error result of the operation in case of failure or cancellation.',
    )
    metadata: Optional[Dict[str, Any]] = Field(
        None,
        description='Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.',
    )
    name: Optional[str] = Field(
        None,
        description='The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.',
    )
    response: Optional[Dict[str, Any]] = Field(
        None,
        description='The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.',
    )


class Source(BaseModel):
    repoSource: Optional[RepoSource] = Field(
        None,
        description='If provided, get the source from this location in a Cloud Source Repository.',
    )
    storageSource: Optional[StorageSource] = Field(
        None,
        description='If provided, get the source from this location in Google Cloud Storage.',
    )
    storageSourceManifest: Optional[StorageSourceManifest] = Field(
        None,
        description='If provided, get the source from this manifest in Google Cloud Storage. This feature is in Preview; see description [here](https://github.com/GoogleCloudPlatform/cloud-builders/tree/master/gcs-fetcher).',
    )


class SourceProvenance(BaseModel):
    fileHashes: Optional[Dict[str, FileHashes]] = Field(
        None,
        description='Output only. Hash(es) of the build source, which can be used to verify that the original source integrity was maintained in the build. Note that `FileHashes` will only be populated if `BuildOptions` has requested a `SourceProvenanceHash`. The keys to this map are file paths used as build source and the values contain the hash values for those files. If the build source came in a single package such as a gzipped tarfile (`.tar.gz`), the `FileHash` will be for the single path to that file.',
    )
    resolvedRepoSource: Optional[RepoSource] = Field(
        None,
        description="A copy of the build's `source.repo_source`, if exists, with any revisions resolved.",
    )
    resolvedStorageSource: Optional[StorageSource] = Field(
        None,
        description="A copy of the build's `source.storage_source`, if exists, with any generations resolved.",
    )
    resolvedStorageSourceManifest: Optional[StorageSourceManifest] = Field(
        None,
        description="A copy of the build's `source.storage_source_manifest`, if exists, with any revisions resolved. This feature is in Preview.",
    )


class UploadedMavenArtifact(BaseModel):
    fileHashes: Optional[FileHashes] = Field(
        None, description='Hash types and values of the Maven Artifact.'
    )
    pushTiming: Optional[TimeSpan] = Field(
        None,
        description='Output only. Stores timing information for pushing the specified artifact.',
    )
    uri: Optional[str] = Field(None, description='URI of the uploaded artifact.')


class UploadedPythonPackage(BaseModel):
    fileHashes: Optional[FileHashes] = Field(
        None, description='Hash types and values of the Python Artifact.'
    )
    pushTiming: Optional[TimeSpan] = Field(
        None,
        description='Output only. Stores timing information for pushing the specified artifact.',
    )
    uri: Optional[str] = Field(None, description='URI of the uploaded artifact.')


class ArtifactResult(BaseModel):
    fileHash: Optional[List[FileHashes]] = Field(
        None, description='The file hash of the artifact.'
    )
    location: Optional[str] = Field(
        None,
        description='The path of an artifact in a Google Cloud Storage bucket, with the generation number. For example, `gs://mybucket/path/to/output.jar#generation`.',
    )


class BatchCreateBitbucketServerConnectedRepositoriesResponse(BaseModel):
    bitbucketServerConnectedRepositories: Optional[
        List[BitbucketServerConnectedRepository]
    ] = Field(None, description='The connected Bitbucket Server repositories.')


class BatchCreateGitLabConnectedRepositoriesResponse(BaseModel):
    gitlabConnectedRepositories: Optional[List[GitLabConnectedRepository]] = Field(
        None, description="The GitLab connected repository requests' responses."
    )


class NotifierConfig(BaseModel):
    apiVersion: Optional[str] = Field(
        None, description='The API version of this configuration format.'
    )
    kind: Optional[str] = Field(
        None, description='The type of notifier to use (e.g. SMTPNotifier).'
    )
    metadata: Optional[NotifierMetadata] = Field(
        None, description='Metadata for referring to/handling/deploying this notifier.'
    )
    spec: Optional[NotifierSpec] = Field(
        None, description='The actual configuration for this notifier.'
    )


class Results(BaseModel):
    artifactManifest: Optional[str] = Field(
        None,
        description='Path to the artifact manifest for non-container artifacts uploaded to Cloud Storage. Only populated when artifacts are uploaded to Cloud Storage.',
    )
    artifactTiming: Optional[TimeSpan] = Field(
        None, description='Time to push all non-container artifacts to Cloud Storage.'
    )
    buildStepImages: Optional[List[str]] = Field(
        None,
        description='List of build step digests, in the order corresponding to build step indices.',
    )
    buildStepOutputs: Optional[List[str]] = Field(
        None,
        description='List of build step outputs, produced by builder images, in the order corresponding to build step indices. [Cloud Builders](https://cloud.google.com/cloud-build/docs/cloud-builders) can produce this output by writing to `$BUILDER_OUTPUT/output`. Only the first 4KB of data is stored.',
    )
    images: Optional[List[BuiltImage]] = Field(
        None, description='Container images that were built as a part of the build.'
    )
    mavenArtifacts: Optional[List[UploadedMavenArtifact]] = Field(
        None,
        description='Maven artifacts uploaded to Artifact Registry at the end of the build.',
    )
    numArtifacts: Optional[str] = Field(
        None,
        description='Number of non-container artifacts uploaded to Cloud Storage. Only populated when artifacts are uploaded to Cloud Storage.',
    )
    pythonPackages: Optional[List[UploadedPythonPackage]] = Field(
        None,
        description='Python artifacts uploaded to Artifact Registry at the end of the build.',
    )


class Build(BaseModel):
    approval: Optional[BuildApproval] = Field(
        None,
        description="Output only. Describes this build's approval configuration, status, and result.",
    )
    artifacts: Optional[Artifacts] = Field(
        None,
        description='Artifacts produced by the build that should be uploaded upon successful completion of all build steps.',
    )
    availableSecrets: Optional[Secrets] = Field(
        None, description='Secrets and secret environment variables.'
    )
    buildTriggerId: Optional[str] = Field(
        None,
        description='Output only. The ID of the `BuildTrigger` that triggered this build, if it was triggered automatically.',
    )
    createTime: Optional[str] = Field(
        None,
        description='Output only. Time at which the request to create the build was received.',
    )
    failureInfo: Optional[FailureInfo] = Field(
        None,
        description='Output only. Contains information about the build when status=FAILURE.',
    )
    finishTime: Optional[str] = Field(
        None,
        description="Output only. Time at which execution of the build was finished. The difference between finish_time and start_time is the duration of the build's execution.",
    )
    id: Optional[str] = Field(
        None, description='Output only. Unique identifier of the build.'
    )
    images: Optional[List[str]] = Field(
        None,
        description="A list of images to be pushed upon the successful completion of all build steps. The images are pushed using the builder service account's credentials. The digests of the pushed images will be stored in the `Build` resource's results field. If any of the images fail to be pushed, the build status is marked `FAILURE`.",
    )
    logUrl: Optional[str] = Field(
        None,
        description='Output only. URL to logs for this build in Google Cloud Console.',
    )
    logsBucket: Optional[str] = Field(
        None,
        description='Google Cloud Storage bucket where logs should be written (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)). Logs file names will be of the format `${logs_bucket}/log-${build_id}.txt`.',
    )
    name: Optional[str] = Field(
        None,
        description="Output only. The 'Build' name with format: `projects/{project}/locations/{location}/builds/{build}`, where {build} is a unique identifier generated by the service.",
    )
    options: Optional[BuildOptions] = Field(
        None, description='Special options for this build.'
    )
    projectId: Optional[str] = Field(
        None, description='Output only. ID of the project.'
    )
    queueTtl: Optional[str] = Field(
        None,
        description='TTL in queue for this build. If provided and the build is enqueued longer than this value, the build will expire and the build status will be `EXPIRED`. The TTL starts ticking from create_time.',
    )
    results: Optional[Results] = Field(
        None, description='Output only. Results of the build.'
    )
    secrets: Optional[List[Secret]] = Field(
        None,
        description='Secrets to decrypt using Cloud Key Management Service. Note: Secret Manager is the recommended technique for managing sensitive data with Cloud Build. Use `available_secrets` to configure builds to access secrets from Secret Manager. For instructions, see: https://cloud.google.com/cloud-build/docs/securing-builds/use-secrets',
    )
    serviceAccount: Optional[str] = Field(
        None,
        description='IAM service account whose credentials will be used at build runtime. Must be of the format `projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT}`. ACCOUNT can be email address or uniqueId of the service account. ',
    )
    source: Optional[Source] = Field(
        None, description='The location of the source files to build.'
    )
    sourceProvenance: Optional[SourceProvenance] = Field(
        None, description='Output only. A permanent fixed identifier for source.'
    )
    startTime: Optional[str] = Field(
        None,
        description='Output only. Time at which execution of the build was started.',
    )
    status: Optional[Status1] = Field(
        None, description='Output only. Status of the build.'
    )
    statusDetail: Optional[str] = Field(
        None,
        description='Output only. Customer-readable message about the current status.',
    )
    steps: Optional[List[BuildStep]] = Field(
        None, description='Required. The operations to be performed on the workspace.'
    )
    substitutions: Optional[Dict[str, str]] = Field(
        None, description='Substitutions data for `Build` resource.'
    )
    tags: Optional[List[str]] = Field(
        None, description='Tags for annotation of a `Build`. These are not docker tags.'
    )
    timeout: Optional[str] = Field(
        None,
        description='Amount of time that this build should be allowed to run, to second granularity. If this amount of time elapses, work on the build will cease and the build status will be `TIMEOUT`. `timeout` starts ticking from `startTime`. Default time is ten minutes.',
    )
    timing: Optional[Dict[str, TimeSpan]] = Field(
        None,
        description='Output only. Stores timing information for phases of the build. Valid keys are: * BUILD: time to execute all build steps. * PUSH: time to push all artifacts including docker images and non docker artifacts. * FETCHSOURCE: time to fetch source. * SETUPBUILD: time to set up build. If the build does not specify source or images, these keys will not be included.',
    )
    warnings: Optional[List[Warning]] = Field(
        None,
        description='Output only. Non-fatal problems encountered during the execution of the build.',
    )


class BuildOperationMetadata(BaseModel):
    build: Optional[Build] = Field(
        None, description='The build that the operation is tracking.'
    )
